package endpoints

service UserEndpoint {
    Handler SendCode(SendCodeRequest req) -> (SendCodeResponse)
    Handler HandleCode(HandleCodeRequest req) -> (HandleCodeResponse)
    Handler RequiredOPK(RequiredOPKRequest req) -> (RequiredOPKResponse)
    Handler LoadOPK(LoadOPKRequest req) -> (LoadOPKResponse)
    Handler FindUsersByPartNickname(FindUsersByPartNicknameRequest req) -> (FindUsersByPartNicknameResponse)
    Handler GetInitMsgKeys(GetInitMsgKeysRequest req) -> (GetInitMsgKeysResponse)
    Handler Register(RegisterRequest req) -> (RegisterResponse)
    Handler AuthToken(AuthTokenRequest req) -> (AuthTokenResponse)
    Handler AuthCredentials(AuthCredentialsRequest req) -> (AuthCredentialsResponse)
}

object SendCodeRequest {
    string number
}

object SendCodeResponse {}

object HandleCodeRequest {
    string number
    uint8  code
}

object HandleCodeResponse {}

object RequiredOPKRequest {
    [16]byte sessionToken
}

object RequiredOPKResponse {
    uint16 count
}

object LoadOPKRequest {
    [16]byte sessionToken
    []OPKPair  OPK
}

object OPKPair {
	uint32 OPKId
	[32]byte OPK
}

object LoadOPKResponse {}

object FindUsersByPartNicknameRequest {
	string PartNickname
}

object FindUsersByPartNicknameResponse {
	[]PresentUser Users
}

object PresentUser {
	[32]byte IdentityKey
	string   Nickname
	string   PictureID
	string   Status
}

object GetInitMsgKeysRequest {
    [16]byte    sessionToken
	[32]byte    IdentityKey
}

object GetInitMsgKeysResponse {
	uint32     OPKId
	[32]byte   OPK
	[32]byte   SignedLTPK
	[64]byte   Signature
}

object RegisterRequest {
	string   Number
	uint8 Code
	string Nickname
	string PassHash

	string DeviceID
	string DeviceName
	[32]byte LTPK
	[64]byte LTPKSignature
	[32]byte IdentityKey
}

object RegisterResponse {
	[16]byte SessionToken
}

object AuthTokenRequest {
	[16]byte SessionToken
}

object AuthTokenResponse {
	[16]byte SessionToken
}

object AuthCredentialsRequest {
	string Number
	string PassHash
}

object AuthCredentialsResponse {
	[16]byte SessionToken
}

